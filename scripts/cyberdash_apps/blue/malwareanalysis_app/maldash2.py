import dash
from dash import dcc, html, Input, Output, State
import dash_cytoscape as cyto
import hashlib
import os
import networkx as nx
import plotly.graph_objects as go

app = dash.Dash(__name__)

dark_theme = {'backgroundColor': '#1e1e1e', 'color': 'white'}

# Layout
app.layout = html.Div([
    html.H1("Malware Analysis Dashboard", style={'textAlign': 'center', **dark_theme}),
    dcc.Upload(
        id='upload-file',
        children=html.Button('Upload Malware Sample', style=dark_theme),
        multiple=False
    ),
    html.Div(id='file-metadata', style=dark_theme),
    dcc.Graph(id='network-graph', style={'backgroundColor': '#1e1e1e'})
], style=dark_theme)

# File Hash Calculation
def compute_hashes(file_path):
    with open(file_path, 'rb') as f:
        data = f.read()
    return {
        'MD5': hashlib.md5(data).hexdigest(),
        'SHA1': hashlib.sha1(data).hexdigest(),
        'SHA256': hashlib.sha256(data).hexdigest()
    }

# Callbacks
@app.callback(
    Output('file-metadata', 'children'),
    Input('upload-file', 'contents'),
    State('upload-file', 'filename')
)
def analyze_file(contents, filename):
    if contents is None:
        return "No file uploaded."
    
    file_path = os.path.join('/tmp', filename)
    with open(file_path, 'wb') as f:
        f.write(contents.encode('utf-8'))
    
    hashes = compute_hashes(file_path)
    return html.Pre(f"Filename: {filename}\n" + "\n".join([f"{k}: {v}" for k, v in hashes.items()]), style=dark_theme)

# Sample Network Graph
@app.callback(
    Output('network-graph', 'figure'),
    Input('upload-file', 'contents')
)
def generate_graph(contents):
    if contents is None:
        return go.Figure()
    
    G = nx.Graph()
    G.add_edges_from([("Malware", "C2 Server"), ("Malware", "Registry Edit"), ("C2 Server", "Suspicious IP")])
    pos = nx.spring_layout(G)
    edges = [(pos[a][0], pos[a][1], pos[b][0], pos[b][1]) for a, b in G.edges]
    
    fig = go.Figure()
    for edge in edges:
        fig.add_trace(go.Scatter(
            x=[edge[0], edge[2]], y=[edge[1], edge[3]],
            mode='lines', line=dict(width=1, color='white')
        ))
    
    fig.add_trace(go.Scatter(
        x=[pos[n][0] for n in G.nodes], y=[pos[n][1] for n in G.nodes],
        mode='markers+text', marker=dict(color='red', size=10),
        text=list(G.nodes), textposition='top center'
    ))
    
    fig.update_layout(
        plot_bgcolor='#1e1e1e', paper_bgcolor='#1e1e1e', font_color='white',
        xaxis=dict(title='Time (seconds)', color='white'),
        yaxis=dict(title='Event Count', color='white')
    )
    
    return fig

if __name__ == '__main__':
    app.run_server(debug=True)
