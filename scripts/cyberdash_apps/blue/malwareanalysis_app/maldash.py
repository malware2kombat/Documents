import dash
from dash import dcc, html
import dash_bootstrap_components as dbc
import plotly.graph_objects as go
import networkx as nx
import hashlib
import os

# Initialize Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.DARKLY])

# Function to generate a hash from a file
def compute_hashes(file_path):
    hashes = {}
    with open(file_path, 'rb') as f:
        file_data = f.read()
        hashes['MD5'] = hashlib.md5(file_data).hexdigest()
        hashes['SHA1'] = hashlib.sha1(file_data).hexdigest()
        hashes['SHA256'] = hashlib.sha256(file_data).hexdigest()
    return hashes

# Sample malware behavior visualization (network graph)
def generate_network_graph():
    G = nx.DiGraph()
    G.add_edges_from([
        ("Malware.exe", "svchost.exe"),
        ("Malware.exe", "explorer.exe"),
        ("Malware.exe", "C2 Server"),
        ("C2 Server", "Unknown IP")
    ])
    pos = nx.spring_layout(G)
    edge_x, edge_y, node_x, node_y, node_text = [], [], [], [], []
    for edge in G.edges():
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        edge_x.append(x0)
        edge_x.append(x1)
        edge_x.append(None)
        edge_y.append(y0)
        edge_y.append(y1)
        edge_y.append(None)
    for node in G.nodes():
        x, y = pos[node]
        node_x.append(x)
        node_y.append(y)
        node_text.append(node)
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=edge_x, y=edge_y, mode='lines', line=dict(color='gray', width=1)))
    fig.add_trace(go.Scatter(x=node_x, y=node_y, mode='markers+text',
                             marker=dict(size=10, color='red'), text=node_text, textposition="top center"))
    fig.update_layout(title="Malware Behavior Graph", template="plotly_dark")
    return fig

# Layout
app.layout = dbc.Container([
    dbc.Row(dbc.Col(html.H2("Malware Analysis Dashboard", className='text-center text-primary mb-4'))),
    dbc.Row([
        dbc.Col([dcc.Graph(figure=generate_network_graph())], width=12)
    ])
])

if __name__ == '__main__':
    app.run_server(debug=True)
